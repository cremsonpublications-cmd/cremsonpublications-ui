import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useUser } from "@clerk/clerk-react";
import { useOrders } from "../context/OrderContext";

// Helper function to detect auto-generated tracking IDs
const isAutoGeneratedTrackingId = (trackingId) => {
  if (!trackingId) return false;
  // Check if it matches the pattern TRK + timestamp (like TRK1728123456789)
  return /^TRK\d{13}$/.test(trackingId);
};
import {
  Package,
  Truck,
  CheckCircle,
  Clock,
  Calendar,
  MapPin,
  CreditCard,
  Eye,
  ShoppingBag,
} from "lucide-react";

const MyOrdersPage = () => {
  const navigate = useNavigate();
  const { user } = useUser();
  const { orders, loading, error, fetchUserOrders, hasOrdersLoaded } = useOrders();
  const [selectedOrder, setSelectedOrder] = useState(null);

  // Fetch orders ONLY when this page is visited
  useEffect(() => {
    if (user?.primaryEmailAddress?.emailAddress && !hasOrdersLoaded()) {
      fetchUserOrders();
    }
  }, [user?.primaryEmailAddress?.emailAddress, fetchUserOrders, hasOrdersLoaded]);

  // Debug: Log orders data when it changes
  useEffect(() => {
    if (orders && orders.length > 0) {
      console.log('Orders data:', orders);
      console.log('First order items:', orders[0]?.items);
      if (orders[0]?.items && orders[0].items.length > 0) {
        console.log('First item structure:', orders[0].items[0]);
      }
    }
  }, [orders]);

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case "confirmed":
        return "text-green-600 bg-green-100";
      case "processing":
        return "text-blue-600 bg-blue-100";
      case "shipped":
        return "text-purple-600 bg-purple-100";
      case "delivered":
        return "text-green-700 bg-green-200";
      case "cancelled":
        return "text-red-600 bg-red-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  const getStatusIcon = (status) => {
    switch (status?.toLowerCase()) {
      case "confirmed":
        return <CheckCircle size={16} />;
      case "processing":
        return <Clock size={16} />;
      case "shipped":
        return <Truck size={16} />;
      case "delivered":
        return <Package size={16} />;
      default:
        return <Package size={16} />;
    }
  };

  const OrderCardSkeleton = () => (
    <div className="bg-white rounded-lg border border-gray-200 p-6 animate-pulse">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className="w-5 h-5 bg-gray-300 rounded"></div>
          <div>
            <div className="h-5 bg-gray-300 rounded w-32 mb-2"></div>
            <div className="h-4 bg-gray-300 rounded w-24"></div>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <div className="h-6 bg-gray-300 rounded-full w-20"></div>
          <div className="h-8 bg-gray-300 rounded w-24"></div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div>
          <div className="h-4 bg-gray-300 rounded w-12 mb-1"></div>
          <div className="h-5 bg-gray-300 rounded w-16"></div>
        </div>
        <div>
          <div className="h-4 bg-gray-300 rounded w-20 mb-1"></div>
          <div className="h-5 bg-gray-300 rounded w-24"></div>
        </div>
        <div>
          <div className="h-4 bg-gray-300 rounded w-28 mb-1"></div>
          <div className="h-5 bg-gray-300 rounded w-16"></div>
        </div>
      </div>

      <div className="border-t border-gray-200 pt-4">
        <div className="h-4 bg-gray-300 rounded w-32 mb-2"></div>
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <div className="h-4 bg-gray-300 rounded w-40"></div>
            <div className="h-4 bg-gray-300 rounded w-12"></div>
          </div>
          <div className="flex items-center justify-between">
            <div className="h-4 bg-gray-300 rounded w-36"></div>
            <div className="h-4 bg-gray-300 rounded w-12"></div>
          </div>
        </div>
      </div>
    </div>
  );

  const OrderCard = ({ order }) => (
    <div className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-lg transition-shadow">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-center gap-3">
          <Package className="w-5 h-5 text-gray-400" />
          <div>
            <h3 className="font-semibold text-gray-900">
              Order #{order.order_id}
            </h3>
            <p className="text-sm text-gray-600 flex items-center gap-1">
              <Calendar size={14} />
              {new Date(order.order_date).toLocaleDateString()}
            </p>
          </div>
        </div>
        <div className="flex items-center gap-3">
          <span
            className={`px-3 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${getStatusColor(
              order.delivery?.status
            )}`}
          >
            {getStatusIcon(order.delivery?.status)}
            {order.delivery?.status}
          </span>
          <button
            onClick={() => setSelectedOrder(order)}
            className="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center gap-1"
          >
            <Eye size={14} />
            View Details
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
        <div>
          <p className="text-sm text-gray-600">Items</p>
          <p className="font-semibold">{order.items?.length || 0} items</p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Total Amount</p>
          <p className="font-semibold">
            ₹{order.order_summary?.grandTotal?.toFixed(2) || "0.00"}
          </p>
        </div>
        <div>
          <p className="text-sm text-gray-600">Expected Delivery</p>
          <p className="font-semibold">
            {order.delivery?.expectedDate
              ? new Date(order.delivery.expectedDate).toLocaleDateString()
              : "TBD"}
          </p>
        </div>
      </div>

      {order.items && order.items.length > 0 && (
        <div className="border-t border-gray-200 pt-4">
          <p className="text-sm text-gray-600 mb-2">Items in this order:</p>
          <div className="space-y-2">
            {order.items.slice(0, 2).map((item, index) => (
              <div
                key={index}
                className="flex items-center justify-between text-sm"
              >
                <span className="text-gray-900">{item.name || item.productName || item.title || `Product ${item.productId || 'Unknown'}`}</span>
                <span className="text-gray-600">Qty: {item.quantity}</span>
              </div>
            ))}
            {order.items.length > 2 && (
              <p className="text-sm text-gray-500">
                + {order.items.length - 2} more items
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );

  const OrderDetailsModal = ({ order, onClose }) => {
    // Disable body scroll when modal is open
    useEffect(() => {
      document.body.style.overflow = 'hidden';
      return () => {
        document.body.style.overflow = 'unset';
      };
    }, []);

    // Handle outside click to close modal
    const handleBackdropClick = (e) => {
      if (e.target === e.currentTarget) {
        onClose();
      }
    };

    return (
      <div
        className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[200] p-2 sm:p-4"
        onClick={handleBackdropClick}
      >
        <div className="bg-white rounded-lg max-w-4xl w-full max-h-[95vh] sm:max-h-[90vh] overflow-y-auto relative">
          {/* Header */}
          <div className="sticky top-0 bg-white p-4 sm:p-6 border-b border-gray-200 z-10">
            <div className="flex items-center justify-between">
              <h2 className="text-lg sm:text-2xl font-bold text-gray-900">Order Details</h2>
              <button
                onClick={onClose}
                className="w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600 hover:text-gray-800 transition-colors"
              >
                <span className="text-lg sm:text-xl font-bold">×</span>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="p-4 sm:p-6 space-y-4 sm:space-y-6">
          {/* Order Info */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                  <Package size={18} />
                  Order Information
                </h3>
                <div className="space-y-2 text-sm">
                  <p>
                    <span className="text-gray-600">Order ID:</span>{" "}
                    {order.order_id}
                  </p>
                  <p>
                    <span className="text-gray-600">Date:</span>{" "}
                    {new Date(order.order_date).toLocaleDateString()}
                  </p>
                  <p className="flex items-center gap-2">
                    <span className="text-gray-600">Status:</span>
                    <span
                      className={`px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${getStatusColor(
                        order.order_status
                      )}`}
                    >
                      {getStatusIcon(order.order_status)}
                      {order.order_status}
                    </span>
                  </p>
                </div>
              </div>

              <div>
                <h3 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                  <MapPin size={18} />
                  Shipping Address
                </h3>
                <div className="text-sm text-gray-700">
                  <p>{order.user_info?.address?.street}</p>
                  {order.user_info?.address?.apartment && (
                    <p>{order.user_info.address.apartment}</p>
                  )}
                  <p>
                    {order.user_info?.address?.city}{" "}
                    {order.user_info?.address?.pincode}
                  </p>
                  <p>
                    {order.user_info?.address?.state},{" "}
                    {order.user_info?.address?.country}
                  </p>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <h3 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                  <CreditCard size={18} />
                  Payment Information
                </h3>
                <div className="space-y-2 text-sm">
                  <p>
                    <span className="text-gray-600">Method:</span>{" "}
                    {order.payment?.method || "N/A"}
                  </p>
                  <p>
                    <span className="text-gray-600">Status:</span>{" "}
                    {order.payment?.status || "N/A"}
                  </p>
                  <p>
                    <span className="text-gray-600">Transaction ID:</span>{" "}
                    {order.payment?.transactionId || "N/A"}
                  </p>
                </div>
              </div>

              <div>
                <h3 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                  <Truck size={18} />
                  Delivery Information
                </h3>
                <div className="space-y-2 text-sm">
                  <p>
                    <span className="text-gray-600">Status:</span>{" "}
                    {order.delivery?.status || "Order Placed"}
                  </p>
                  {order.delivery?.deliveryType && (
                    <p>
                      <span className="text-gray-600">Method:</span>{" "}
                      {order.delivery.deliveryType}
                    </p>
                  )}
                  {order.delivery?.expectedDate && (
                    <p>
                      <span className="text-gray-600">Expected Date:</span>{" "}
                      {new Date(
                        order.delivery.expectedDate
                      ).toLocaleDateString()}
                    </p>
                  )}
                  {order.delivery?.trackingId &&
                    !isAutoGeneratedTrackingId(order.delivery?.trackingId) && (
                      <p>
                        <span className="text-gray-600">Tracking ID:</span>{" "}
                        {order.delivery.trackingId}
                      </p>
                    )}
                  {(!order.delivery?.trackingId ||
                    isAutoGeneratedTrackingId(order.delivery?.trackingId)) && (
                    <p className="text-gray-500 italic">
                      Tracking details will be updated once order is processed
                    </p>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Order Items */}
          <div>
            <h3 className="font-semibold text-gray-900 mb-4 flex items-center gap-2">
              <ShoppingBag size={18} />
              Order Items
            </h3>
            <div className="space-y-3">
              {order.items?.map((item, index) => (
                <div
                  key={index}
                  className="flex flex-col sm:flex-row sm:items-center justify-between p-3 sm:p-4 border border-gray-200 rounded-lg gap-3"
                >
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">{item.name || item.productName || item.title || `Product ${item.productId || 'Unknown'}`}</h4>
                    <p className="text-sm text-gray-600">
                      by {item.author || "Unknown Author"}
                    </p>
                    <p className="text-sm text-gray-600">
                      Quantity: {item.quantity}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="font-medium text-gray-900">
                      ₹{item.totalPrice?.toFixed(2)}
                    </p>
                    <p className="text-sm text-gray-600">
                      ₹{item.currentPrice?.toFixed(2)} each
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Order Summary */}
          <div className="border-t border-gray-200 pt-4">
            <h3 className="font-semibold text-gray-900 mb-4">Order Summary</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Subtotal:</span>
                <span>
                  ₹{order.order_summary?.subTotal?.toFixed(2) || "0.00"}
                </span>
              </div>
              {order.order_summary?.discountTotal > 0 && (
                <div className="flex justify-between text-green-600">
                  <span>Discount:</span>
                  <span>-₹{order.order_summary.discountTotal.toFixed(2)}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-gray-600">Delivery:</span>
                <span>
                  {order.order_summary?.deliveryCharge === 0
                    ? "FREE"
                    : `₹${order.order_summary?.deliveryCharge?.toFixed(2)}`}
                </span>
              </div>
              <div className="flex justify-between font-semibold text-lg border-t border-gray-200 pt-2">
                <span>Total:</span>
                <span>
                  ₹{order.order_summary?.grandTotal?.toFixed(2) || "0.00"}
                </span>
              </div>
            </div>
          </div>
          </div>
        </div>
      </div>
    );
  };

  if (loading) {
    return (
      <div className="max-w-frame mx-auto px-4 py-8">
        <div className="mb-8">
          <div className="h-8 bg-gray-300 rounded w-48 mb-2 animate-pulse"></div>
          <div className="h-4 bg-gray-300 rounded w-64 animate-pulse"></div>
        </div>
        
        <div className="space-y-6">
          {[1, 2, 3].map((index) => (
            <OrderCardSkeleton key={index} />
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="max-w-frame mx-auto px-4 py-8">
        <div className="text-center">
          <Package size={64} className="mx-auto text-gray-400 mb-4" />
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">
            Error loading orders
          </h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => fetchUserOrders(true)}
            className="bg-black text-white px-6 py-3 rounded-md hover:bg-gray-800 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  // Check if user is not signed in
  if (!user?.primaryEmailAddress?.emailAddress) {
    return (
      <div className="max-w-frame mx-auto px-4 py-8">
        <div className="text-center">
          <ShoppingBag size={64} className="mx-auto text-gray-400 mb-4" />
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">
            Sign in required
          </h2>
          <p className="text-gray-600 mb-4">
            Please sign in to view your orders.
          </p>
          <button
            onClick={() => navigate("/")}
            className="bg-black text-white px-6 py-3 rounded-md hover:bg-gray-800 transition-colors"
          >
            Go to Homepage
          </button>
        </div>
      </div>
    );
  }

  if (orders.length === 0 && !loading) {
    return (
      <div className="max-w-frame mx-auto px-4 py-8">
        <div className="text-center">
          <ShoppingBag size={64} className="mx-auto text-gray-400 mb-4" />
          <h2 className="text-2xl font-semibold text-gray-900 mb-2">
            No orders found
          </h2>
          <p className="text-gray-600 mb-4">
            You haven't placed any orders yet.
          </p>
          <button
            onClick={() => navigate("/shop")}
            className="bg-black text-white px-6 py-3 rounded-md hover:bg-gray-800 transition-colors"
          >
            Start Shopping
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-frame mx-auto px-4 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">My Orders</h1>
        <p className="text-gray-600">
          Track and manage your orders for {user?.email}
        </p>
      </div>

      <div className="space-y-6">
        {orders.map((order) => (
          <OrderCard key={order.id} order={order} />
        ))}
      </div>

      {selectedOrder && (
        <OrderDetailsModal
          order={selectedOrder}
          onClose={() => setSelectedOrder(null)}
        />
      )}
    </div>
  );
};

export default MyOrdersPage;
